#!/usr/bin/env ruby
# Copy from https://github.com/hsbt/hsbt/blob/master/libexec/dev-source-update

require 'bundler/inline'
require 'open3'

gemfile true do
  source 'https://rubygems.org'
  gem 'parallel', require: true
  gem 'octokit'
end

def run(dir, cmd)
  _, err, _ = Open3.capture3(cmd)
  if err != '' && !err.start_with?('Already on ')
    puts <<~EOS
      #{dir}, #{cmd}
      #{err}
    EOS
  end
end

#
def has_origin_url?(dir)
  Dir.chdir(dir) do
    o, _, _ = Open3.capture3("git config remote.origin.url")
    return o.length > 0
  end
end

def deleted?(octokit, dir)
  return false unless dir.start_with?('github.com/')

  repo_name = dir.gsub('github.com/', '')
  !octokit.repository?(repo_name)
end

def archived?(octokit, dir)
  return false unless dir.start_with?('github.com/')

  begin
    repo_name = dir.gsub('github.com/', '')
    repo = octokit.repository(repo_name)
    repo.archived
  rescue Octokit::NotFound
    false
  end
end

octokit = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])
root_dir = `ghq root`.chomp

if root_dir == '/'
  puts 'ERROR: ghq root is /. Something wrong.'
  exit 1
end

Dir.chdir(root_dir) do
  Parallel.map(`ghq list`.split.shuffle, in_processes: 4) do |dir|
    next unless File.directory?("#{dir}/.git")

    puts dir

    if has_origin_url?(dir) && deleted?(octokit, dir)
      puts "delete deleted repo: #{root_dir}/#{dir}"
      #system("rm -rf #{root_dir}/#{dir}")
      next
    end

    if archived?(octokit, dir)
      puts "delete archived repo: #{root_dir}/#{dir}"
      #system("rm -rf #{root_dir}/#{dir}")
      next
    end

    Dir.chdir(dir) do
      _, _, status = Open3.capture3('git config --local --get remote.origin.url')
      if status.exited? && status.exitstatus.zero?
        run(dir, 'git fetch --prune --no-tags')
        run(dir, 'git stash')
        run(dir, "git remote show origin | grep 'HEAD branch' | awk '{print $NF}' | xargs git switch")
        run(dir, 'git pull --rebase --prune')
        run(dir, 'git submodule update --init --recursive')
        run(dir, 'git gc --prune')
        run(dir, 'git delete-merged-branches')
      end
    end
  end
end
