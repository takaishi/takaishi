#!/usr/bin/env ruby
require 'optparse'

args = nil
op = OptionParser.new
opts = {
  cluster: nil,
  service: nil
}

op.on('-c', '--cluster VALUE', '') do |v|
  opts[:cluster] = v
end

op.on('-s', '--service VALUE', '') do |v|
  opts[:service] = v
end

begin
  args = op.parse(ARGV)
rescue OptionParser::InvalidOption => e
  usage e.message
end

cluster = opts[:cluster] || `aws ecs list-clusters | jq -r '.clusterArns[]' | fzf`.chomp
service = opts[:service] || `aws ecs list-services --cluster #{cluster} | jq -r ".serviceArns[]" | fzf`.chomp
task = `aws ecs list-tasks --cluster #{cluster} --service #{service} | jq -r ".taskArns[]" | fzf`.chomp
container = `aws ecs describe-tasks --cluster #{cluster} --tasks #{task} | jq -r ".tasks[0].containers[] | .name" | fzf`.chomp

cmd = "aws ecs execute-command --interactive --cluster #{cluster} --task #{task} --container #{container} --command #{args.join(' ')}"
system "zsh -ic 'print -s #{cmd}'"
Process.wait spawn(cmd)
